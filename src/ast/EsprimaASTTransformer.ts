import { NodeKind } from 'ast-types/gen/kinds';
import { ASTTransformer, PropList, PropMap, UnistData, UnistLike } from './ASTTransformer';

type X = PropList<NodeKind, 'type', 'ClassBody'>;

export default class EsprimaASTTransformer extends ASTTransformer<NodeKind, 'type', UnistData<NodeKind>> {
  private static childLikeProps: PropMap<NodeKind, 'type'> = {
    File: [['program']],
    Program: [[], 'body'],
    Identifier: [],
    BlockStatement: [[], 'body'],
    EmptyStatement: [],
    ExpressionStatement: [['expression']],
    IfStatement: [['test', 'consequent', 'alternate']],
    LabeledStatement: [['label', 'body']],
    BreakStatement: [['label']],
    ContinueStatement: [['label']],
    WithStatement: [['body']],
    SwitchStatement: [[], 'cases'],
    SwitchCase: [['test'], 'consequent'],
    ReturnStatement: [['argument']],
    ThrowStatement: [['argument']],
    TryStatement: [['block', 'finalizer', 'handler'], 'handlers'],
    CatchClause: [['guard', 'body']],
    WhileStatement: [['test', 'body']],
    DoWhileStatement: [['test', 'body']],
    ForStatement: [['init', 'test', 'update', 'body']],
    VariableDeclaration: [[], 'declarations'],
    ForInStatement: [['left', 'right', 'body']],
    DebuggerStatement: [],
    FunctionDeclaration: [['predicate', 'rest', 'returnType', 'body'], 'params'],
    FunctionExpression: [['predicate', 'rest', 'returnType', 'body'], 'params'],
    VariableDeclarator: [['init']],
    ThisExpression: [],
    ArrayExpression: [[], 'elements'],
    ObjectExpression: [[], 'properties'],
    Property: [['key', 'value']],
    Literal: [],
    SequenceExpression: [[], 'expressions'],
    UnaryExpression: [['argument']],
    BinaryExpression: [['left', 'right']],
    AssignmentExpression: [['left', 'right']],
    MemberExpression: [['object', 'property']],
    UpdateExpression: [['argument']],
    LogicalExpression: [['left', 'right']],
    ConditionalExpression: [['test', 'consequent', 'alternate']],
    NewExpression: [['callee'], 'arguments'],
    CallExpression: [['callee'], 'arguments'],
    RestElement: [['argument']],
    TypeAnnotation: [],
    TSTypeAnnotation: [],
    SpreadElementPattern: [['argument']],
    ArrowFunctionExpression: [['body'], 'defaults'],
    ForOfStatement: [['left', 'right', 'body']],
    YieldExpression: [['argument']],
    GeneratorExpression: [['filter', 'body'], 'blocks'],
    ComprehensionBlock: [['left', 'right']],
    ComprehensionExpression: [['filter', 'body'], 'blocks'],
    ObjectProperty: [['key', 'value']],
    PropertyPattern: [['key', 'pattern']],
    ObjectPattern: [[], 'properties'],
    ArrayPattern: [[], 'elements'],
    SpreadElement: [['argument']],
    AssignmentPattern: [['left', 'right']],
    MethodDefinition: [['key', 'value']],
    ClassPropertyDefinition: [['definition']],
    ClassProperty: [['key', 'value']],
    ClassBody: [[], 'body'],
    ClassDeclaration: [['superClass', 'body']],
    ClassExpression: [['superClass', 'body']],
    Super: [],
    ImportSpecifier: [['imported']],
    ImportDefaultSpecifier: [],
    ImportNamespaceSpecifier: [],
    ImportDeclaration: [['source'], 'specifiers'],
    ExportNamedDeclaration: [['source', 'declaration'], 'specifiers'],
    ExportSpecifier: [['exported']],
    ExportDefaultDeclaration: [['declaration']],
    ExportAllDeclaration: [['exported']],
    TaggedTemplateExpression: [['tag', 'quasi']],
    TemplateLiteral: [[], 'expressions'],
    TemplateElement: [],
    MetaProperty: [['meta', 'property']],
    AwaitExpression: [['argument']],
    SpreadProperty: [['argument']],
    SpreadPropertyPattern: [['argument']],
    ImportExpression: [['source']],
    ChainExpression: [['expression']],
    OptionalCallExpression: [['callee'], 'arguments'],
    OptionalMemberExpression: [['object', 'property']],
    JSXAttribute: [['name', 'value']],
    JSXIdentifier: [],
    JSXNamespacedName: [['name', 'namespace']],
    JSXExpressionContainer: [['expression']],
    JSXElement: [['name', 'openingElement', 'closingElement'], 'children'], // !MISSING: attributes
    JSXFragment: [['openingFragment', 'closingFragment'], 'children'],
    JSXMemberExpression: [['object', 'property']],
    JSXSpreadAttribute: [['argument']],
    JSXEmptyExpression: [],
    JSXText: [],
    JSXSpreadChild: [['expression']],
    JSXOpeningElement: [['name'], 'attributes'],
    JSXClosingElement: [['name']],
    JSXOpeningFragment: [],
    JSXClosingFragment: [],
    Decorator: [['expression']],
    PrivateName: [['id']],
    ClassPrivateProperty: [['key', 'value']],
    TypeParameterDeclaration: [[], 'params'],
    TSTypeParameterDeclaration: [[], 'params'],
    TypeParameterInstantiation: [[], 'params'],
    TSTypeParameterInstantiation: [[], 'params'],
    ClassImplements: [['id', 'superClass']],
    TSExpressionWithTypeArguments: [['expression']],
    AnyTypeAnnotation: [],
    EmptyTypeAnnotation: [],
    MixedTypeAnnotation: [],
    VoidTypeAnnotation: [],
    SymbolTypeAnnotation: [],
    NumberTypeAnnotation: [],
    BigIntTypeAnnotation: [],
    NumberLiteralTypeAnnotation: [],
    NumericLiteralTypeAnnotation: [],
    BigIntLiteralTypeAnnotation: [],
    StringTypeAnnotation: [],
    StringLiteralTypeAnnotation: [],
    BooleanTypeAnnotation: [],
    BooleanLiteralTypeAnnotation: [],
    NullableTypeAnnotation: [],
    NullLiteralTypeAnnotation: [],
    NullTypeAnnotation: [],
    ThisTypeAnnotation: [],
    ExistsTypeAnnotation: [],
    ExistentialTypeParam: [],
    FunctionTypeAnnotation: [],
    FunctionTypeParam: [],
    ArrayTypeAnnotation: [],
    ObjectTypeAnnotation: [],
    ObjectTypeProperty: [],
    ObjectTypeSpreadProperty: [],
    ObjectTypeIndexer: [],
    ObjectTypeCallProperty: [],
    ObjectTypeInternalSlot: [],
    Variance: [],
    QualifiedTypeIdentifier: [],
    GenericTypeAnnotation: [],
    MemberTypeAnnotation: [],
    UnionTypeAnnotation: [],
    IntersectionTypeAnnotation: [],
    TypeofTypeAnnotation: [],
    TypeParameter: [],
    InterfaceTypeAnnotation: [],
    InterfaceExtends: [],
    InterfaceDeclaration: [],
    DeclareInterface: [],
    TypeAlias: [],
    DeclareTypeAlias: [],
    OpaqueType: [],
    DeclareOpaqueType: [],
    TypeCastExpression: [],
    TupleTypeAnnotation: [],
    DeclareVariable: [],
    DeclareFunction: [],
    DeclareClass: [],
    DeclareModule: [],
    DeclareModuleExports: [],
    DeclareExportDeclaration: [],
    ExportBatchSpecifier: [],
    DeclareExportAllDeclaration: [],
    InferredPredicate: [],
    DeclaredPredicate: [],
    EnumDeclaration: [],
    ExportDeclaration: [],
    Noop: [],
    DoExpression: [[], 'body'],
    BindExpression: [['object', 'callee']],
    ParenthesizedExpression: [['expression']],
    ExportNamespaceSpecifier: [['exported']],
    ExportDefaultSpecifier: [['exported']],
    Directive: [['value']],
    DirectiveLiteral: [],
    InterpreterDirective: [],
    StringLiteral: [],
    NumericLiteral: [],
    BigIntLiteral: [],
    NullLiteral: [],
    BooleanLiteral: [],
    RegExpLiteral: [],
    ObjectMethod: [['id', 'key', 'predicate', 'rest', 'returnType', 'body'], 'defaults'], // ! MISSING params
    ClassMethod: [['id', 'key', 'predicate', 'returnType', 'body'], 'defaults'], // !MISSING params
    ClassPrivateMethod: [['id', 'key', 'predicate', 'returnType', 'body'], 'defaults'], // !MISSING params
    RestProperty: [['argument']],
    ForAwaitStatement: [['left', 'right', 'body']],
    Import: [],
    TSQualifiedName: [],
    TSTypeReference: [],
    TSAsExpression: [],
    TSNonNullExpression: [],
    TSAnyKeyword: [],
    TSBigIntKeyword: [],
    TSBooleanKeyword: [],
    TSNeverKeyword: [],
    TSNullKeyword: [],
    TSNumberKeyword: [],
    TSObjectKeyword: [],
    TSStringKeyword: [],
    TSSymbolKeyword: [],
    TSUndefinedKeyword: [],
    TSUnknownKeyword: [],
    TSVoidKeyword: [],
    TSThisType: [],
    TSArrayType: [],
    TSLiteralType: [],
    TSUnionType: [],
    TSIntersectionType: [],
    TSConditionalType: [],
    TSInferType: [],
    TSTypeParameter: [],
    TSParenthesizedType: [],
    TSFunctionType: [],
    TSConstructorType: [],
    TSDeclareFunction: [],
    TSDeclareMethod: [],
    TSMappedType: [],
    TSTupleType: [],
    TSNamedTupleMember: [],
    TSRestType: [],
    TSOptionalType: [],
    TSIndexedAccessType: [],
    TSTypeOperator: [],
    TSIndexSignature: [],
    TSPropertySignature: [],
    TSMethodSignature: [],
    TSTypePredicate: [],
    TSCallSignatureDeclaration: [],
    TSConstructSignatureDeclaration: [],
    TSEnumMember: [],
    TSTypeQuery: [],
    TSImportType: [],
    TSTypeLiteral: [],
    TSTypeAssertion: [],
    TSEnumDeclaration: [],
    TSTypeAliasDeclaration: [],
    TSModuleBlock: [],
    TSModuleDeclaration: [],
    TSImportEqualsDeclaration: [],
    TSExternalModuleReference: [],
    TSExportAssignment: [],
    TSNamespaceExportDeclaration: [],
    TSInterfaceBody: [],
    TSInterfaceDeclaration: [],
    TSParameterProperty: [],
  };

  public language: string = 'javascript';
  protected typeKey: 'type' = 'type';

  public constructor() {
    super(EsprimaASTTransformer.childLikeProps);
  }

  public transform(ast: NodeKind): UnistLike<NodeKind> {
    return this.extend(ast, true) as UnistLike<NodeKind>;
  }

  public revert(ast: UnistLike<NodeKind>): NodeKind {
    return this.splat(ast, true);
  }
}
